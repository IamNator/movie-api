// Code generated by MockGen. DO NOT EDIT.
// Source: thirdparty.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	lib "github.com/iamnator/movie-api/thirdparty/swapi/lib"
)

// MockISwapi is a mock of ISwapi interface.
type MockISwapi struct {
	ctrl     *gomock.Controller
	recorder *MockISwapiMockRecorder
}

// MockISwapiMockRecorder is the mock recorder for MockISwapi.
type MockISwapiMockRecorder struct {
	mock *MockISwapi
}

// NewMockISwapi creates a new mock instance.
func NewMockISwapi(ctrl *gomock.Controller) *MockISwapi {
	mock := &MockISwapi{ctrl: ctrl}
	mock.recorder = &MockISwapiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISwapi) EXPECT() *MockISwapiMockRecorder {
	return m.recorder
}

// GetCharacters mocks base method.
func (m *MockISwapi) GetCharacters(ctx context.Context, id ...int) ([]lib.Person, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCharacters", varargs...)
	ret0, _ := ret[0].([]lib.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacters indicates an expected call of GetCharacters.
func (mr *MockISwapiMockRecorder) GetCharacters(ctx interface{}, id ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, id...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacters", reflect.TypeOf((*MockISwapi)(nil).GetCharacters), varargs...)
}

// GetFilms mocks base method.
func (m *MockISwapi) GetFilms(ctx context.Context, id ...int) ([]lib.Film, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilms", varargs...)
	ret0, _ := ret[0].([]lib.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockISwapiMockRecorder) GetFilms(ctx interface{}, id ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, id...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockISwapi)(nil).GetFilms), varargs...)
}
