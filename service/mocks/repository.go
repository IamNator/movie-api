// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/iamnator/movie-api/model"
)

// MockICommentRepository is a mock of ICommentRepository interface.
type MockICommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICommentRepositoryMockRecorder
}

// MockICommentRepositoryMockRecorder is the mock recorder for MockICommentRepository.
type MockICommentRepositoryMockRecorder struct {
	mock *MockICommentRepository
}

// NewMockICommentRepository creates a new mock instance.
func NewMockICommentRepository(ctrl *gomock.Controller) *MockICommentRepository {
	mock := &MockICommentRepository{ctrl: ctrl}
	mock.recorder = &MockICommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommentRepository) EXPECT() *MockICommentRepositoryMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockICommentRepository) AddComment(comment model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddComment indicates an expected call of AddComment.
func (mr *MockICommentRepositoryMockRecorder) AddComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockICommentRepository)(nil).AddComment), comment)
}

// GetComment mocks base method.
func (m *MockICommentRepository) GetComment(commentID uuid.UUID) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", commentID)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockICommentRepositoryMockRecorder) GetComment(commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockICommentRepository)(nil).GetComment), commentID)
}

// GetCommentCountByMovieID mocks base method.
func (m *MockICommentRepository) GetCommentCountByMovieID(movieID int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentCountByMovieID", movieID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentCountByMovieID indicates an expected call of GetCommentCountByMovieID.
func (mr *MockICommentRepositoryMockRecorder) GetCommentCountByMovieID(movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentCountByMovieID", reflect.TypeOf((*MockICommentRepository)(nil).GetCommentCountByMovieID), movieID)
}

// GetCommentsByID mocks base method.
func (m *MockICommentRepository) GetCommentsByID(commentID ...uuid.UUID) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range commentID {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentsByID", varargs...)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByID indicates an expected call of GetCommentsByID.
func (mr *MockICommentRepositoryMockRecorder) GetCommentsByID(commentID ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByID", reflect.TypeOf((*MockICommentRepository)(nil).GetCommentsByID), commentID...)
}

// GetCommentsByIPAddr mocks base method.
func (m *MockICommentRepository) GetCommentsByIPAddr(ipAddr string, page, pageSize int) ([]model.Comment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByIPAddr", ipAddr, page, pageSize)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommentsByIPAddr indicates an expected call of GetCommentsByIPAddr.
func (mr *MockICommentRepositoryMockRecorder) GetCommentsByIPAddr(ipAddr, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByIPAddr", reflect.TypeOf((*MockICommentRepository)(nil).GetCommentsByIPAddr), ipAddr, page, pageSize)
}

// GetCommentsByMovieID mocks base method.
func (m *MockICommentRepository) GetCommentsByMovieID(movieID, page, pageSize int) ([]model.Comment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByMovieID", movieID, page, pageSize)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommentsByMovieID indicates an expected call of GetCommentsByMovieID.
func (mr *MockICommentRepositoryMockRecorder) GetCommentsByMovieID(movieID, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByMovieID", reflect.TypeOf((*MockICommentRepository)(nil).GetCommentsByMovieID), movieID, page, pageSize)
}
