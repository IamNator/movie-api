// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/iamnator/movie-api/model"
	ports "github.com/iamnator/movie-api/service/ports"
)

// MockICache is a mock of ICache interface.
type MockICache struct {
	ctrl     *gomock.Controller
	recorder *MockICacheMockRecorder
}

// MockICacheMockRecorder is the mock recorder for MockICache.
type MockICacheMockRecorder struct {
	mock *MockICache
}

// NewMockICache creates a new mock instance.
func NewMockICache(ctrl *gomock.Controller) *MockICache {
	mock := &MockICache{ctrl: ctrl}
	mock.recorder = &MockICacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICache) EXPECT() *MockICacheMockRecorder {
	return m.recorder
}

// GetCharactersByMovieID mocks base method.
func (m *MockICache) GetCharactersByMovieID(id, page, pageSize int, filter ports.GetCharacterFiler) ([]model.Character, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharactersByMovieID", id, page, pageSize, filter)
	ret0, _ := ret[0].([]model.Character)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharactersByMovieID indicates an expected call of GetCharactersByMovieID.
func (mr *MockICacheMockRecorder) GetCharactersByMovieID(id, page, pageSize, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharactersByMovieID", reflect.TypeOf((*MockICache)(nil).GetCharactersByMovieID), id, page, pageSize, filter)
}

// GetMovieByID mocks base method.
func (m *MockICache) GetMovieByID(id int) (*model.MovieDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByID", id)
	ret0, _ := ret[0].(*model.MovieDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByID indicates an expected call of GetMovieByID.
func (mr *MockICacheMockRecorder) GetMovieByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByID", reflect.TypeOf((*MockICache)(nil).GetMovieByID), id)
}

// GetMovies mocks base method.
func (m *MockICache) GetMovies(page, pageSize int) ([]model.MovieDetails, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies", page, pageSize)
	ret0, _ := ret[0].([]model.MovieDetails)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockICacheMockRecorder) GetMovies(page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockICache)(nil).GetMovies), page, pageSize)
}

// SetCharactersByMovieID mocks base method.
func (m *MockICache) SetCharactersByMovieID(id int, characters []model.Character) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharactersByMovieID", id, characters)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCharactersByMovieID indicates an expected call of SetCharactersByMovieID.
func (mr *MockICacheMockRecorder) SetCharactersByMovieID(id, characters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharactersByMovieID", reflect.TypeOf((*MockICache)(nil).SetCharactersByMovieID), id, characters)
}

// SetMovieByID mocks base method.
func (m *MockICache) SetMovieByID(id int, movie model.MovieDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMovieByID", id, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMovieByID indicates an expected call of SetMovieByID.
func (mr *MockICacheMockRecorder) SetMovieByID(id, movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMovieByID", reflect.TypeOf((*MockICache)(nil).SetMovieByID), id, movie)
}

// SetMovies mocks base method.
func (m *MockICache) SetMovies(arg0 []model.MovieDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMovies", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMovies indicates an expected call of SetMovies.
func (mr *MockICacheMockRecorder) SetMovies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMovies", reflect.TypeOf((*MockICache)(nil).SetMovies), arg0)
}
